generator client {
  provider = "prisma-client-js"
  output   = "../../../node_modules/.prisma/client"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id          String        @id @default(uuid())
  firstName   String
  lastName    String
  points      Int           @default(0)
  email       String        @unique
  password    String?
  googleId    String?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  reservation Reservation[]
  payment     Payment[]
  feedback    Feedback[]
}

model Reservation {
  id        String   @id @default(uuid())
  status    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id])
  userId String

  ticket Ticket[]

  payment Payment?

  trip   Trip?   @relation(fields: [tripId], references: [id])
  tripId String?

  tripPackage              TripPackage? @relation(fields: [tripPackageTripId, tripPackageTourPackageId], references: [tripId, tourPackageId])
  tripPackageTripId        String?
  tripPackageTourPackageId String?
}

model Ticket {
  id            String       @id @default(uuid())
  price         Float
  status        String
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt

  reservation   Reservation? @relation(fields: [reservationId], references: [id])
  reservationId String?

  seat          Seat         @relation(fields: [seatId], references: [id])
  seatId        String
}

model Payment {
  id        String   @id @default(uuid())
  amount    Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  status    String
  method    String

  user   User   @relation(fields: [userId], references: [id])
  userId String

  reservation   Reservation @relation(fields: [reservationId], references: [id])
  reservationId String      @unique
}

model Feedback {
  id        String   @id @default(uuid())
  rating    Int
  comment   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id])
  userId String
}

model Train {
  id        String   @id @default(uuid())
  name      String
  capacity  Int
  type      String
  status    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  seat Seat[]
  trip Trip[]
}

model Seat {
  id         String   @id @default(uuid())
  status     String
  seatNumber Int
  class      String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  train   Train  @relation(fields: [trainId], references: [id])
  trainId String

  ticket  Ticket[]
}

model Trip {
  id              String   @id @default(uuid())
  deppartual       DateTime
  arrival         DateTime
  frequency       String
  price           Float
  source          String
  destination     String
  stationLocation String
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  train   Train  @relation(fields: [trainId], references: [id])
  trainId String

  reservation Reservation[]
  tripPackage TripPackage[]
}

model TourCompany {
  id          String        @id @default(uuid())
  name        String
  email       String
  tourPackage TourPackage[]
}

model TourPackage {
  id          String      @id @default(uuid())
  name        String
  description String
  price       Float
  duration    String
  company     TourCompany @relation(fields: [companyId], references: [id])
  companyId   String

  tripPackage TripPackage[]
}

model TripPackage {
  trip   Trip   @relation(fields: [tripId], references: [id])
  tripId String

  tourPackage   TourPackage @relation(fields: [tourPackageId], references: [id])
  tourPackageId String

  reservation Reservation[]

  @@id([tripId, tourPackageId])
}
